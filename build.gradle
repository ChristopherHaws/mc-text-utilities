plugins {
	// https://fabricmc.net/wiki/documentation:fabric_loom
	id 'fabric-loom' version '1.0-SNAPSHOT'
    // Quiltflower is a better decompiler
    id "io.github.juuxel.loom-quiltflower" version "1.+"
	id 'maven-publish'
	id 'idea'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
Boolean appendBuildNumber = System.getenv("APPEND_BUILD_NUMBER") == "true" && buildNumber != null

version = project.mod_version +
        (appendBuildNumber ? "-build${buildNumber}" : "") +
        "+${project.minecraft_version}"
archivesBaseName = "${project.archives_base_name}-fabric"
group = project.maven_group

loom {
	splitEnvironmentSourceSets()

	mods {
		textutilities {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	runs {
		client {
			runDir = "run/1.19.2/client"
            vmArg "-XX:+ShowCodeDetailsInExceptionMessages"
		}
		server {
			runDir = "run/1.19.2/server"
            vmArg "-XX:+ShowCodeDetailsInExceptionMessages"
		}
	}
}

sourceSets {
	test {
		compileClasspath += sourceSets.client.compileClasspath
		runtimeClasspath += sourceSets.client.runtimeClasspath
	}
}

repositories {
    mavenCentral()
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Mod
    maven { url = "https://maven.tterrag.com/" } // Registrate and Flywheel
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, fabric ASM

    exclusiveContent {
        forRepository {
            maven {
                name = "CurseForge"
                url = "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }

    // https://docs.modrinth.com/docs/tutorials/maven/#advanced-repository-declaration-recommended
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

    // Create Mod
    createModCompat(dependencies)

    // Unit Tests
	testImplementation(platform('org.junit:junit-bom:5.9.1'))
	testImplementation('org.junit.jupiter:junit-jupiter')
	testImplementation(sourceSets.client.output)

    // Mods that are useful for local development
    devMods(dependencies)
}

def createModCompat(DependencyHandler deps) {
    deps.modApi("com.simibubi.create:create-fabric-${project.minecraft_version}:${project.create_version}") { transitive = false }
    deps.modApi("io.github.fabricators_of_create.Porting-Lib:porting-lib:${project.port_lib_version}+${project.minecraft_version}")
    deps.modApi("com.electronwill.night-config:core:${project.night_config_core_version}")
    deps.modApi("com.electronwill.night-config:toml:${project.night_config_toml_version}")
    deps.modApi("curse.maven:forge-config-api-port-fabric-547434:${project.config_api_id}")
    deps.modApi("com.tterrag.registrate_fabric:Registrate:${project.registrate_version}")
    deps.modApi("com.jozufozu.flywheel:flywheel-fabric-${flywheel_minecraft_version}:${project.flywheel_version}")
    deps.modApi("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")
    deps.modApi("dev.cafeteria:fake-player-api:${project.fake_player_api_version}")
    deps.modApi("io.github.tropheusj:milk-lib:${project.milk_lib_version}")
    deps.implementation("com.google.code.findbugs:jsr305:${project.jsr305_version}")

    // used to prevent forge config api port from complaining
    deps.modApi("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
    deps.modApi("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
}

// Mods that are useful for local development
static def devMods(DependencyHandler deps) {
    deps.modLocalRuntime("maven.modrinth:lazydfu:0.1.3")
    deps.modLocalRuntime("maven.modrinth:lithium:mc1.19.2-0.10.4")
    deps.modLocalRuntime("maven.modrinth:starlight:1.1.1+1.19")
//    deps.modLocalRuntime("maven.modrinth:sodium:mc1.19.2-0.4.4")
//    deps.modLocalRuntime("maven.modrinth:roughly-enough-items:9.1.580+fabric")
//    deps.modLocalRuntime("maven.modrinth:create-fabric:0.5.0g-796+1.19.2")
//    deps.modLocalRuntime("maven.modrinth:expanded-storage:8.1.0-beta.3+fabric")
}

processResources {
    Map<String, Object> properties = new HashMap<>()
    properties.put("version", project.version)
    properties.put("mod_id", project.mod_id)
    properties.put("mod_name", project.mod_name)
    properties.put("mod_version", project.mod_version)
    properties.put("loader_version", project.loader_version)
    properties.put("fabric_version", project.fabric_version)
    properties.put("minecraft_version", project.minecraft_version)
    properties.put("java_version", sourceCompatibility)

    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release.set(17)
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

// configure the maven publication
publishing {
	publications {
		//noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
			//noinspection GroovyAssignabilityCheck
            from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
